
using System;
using System.IO;
using System.Runtime.Serialization.Formatters.Binary;  // binary serialization
using System.Xml.Serialization;                        // xml serialization
using System.Runtime.Serialization;                    // data contract serialization
using System.Text.Json;                                // json serialization

[Serializable] public struct Point  // public is required by xml serialization, public properties are required by json serialization
    {
    public double M { get; set; }
    public double X { get; set; }
    public double Y { get; set; }
    public double Z { get; set; }
    }

class Test
    {

#if DEBUG
    const int Size = 5;
#else
    const int Size = 50000;
#endif

    public static void Main()
        {
        int i;
        FileStream fs;
        long time;

        // generating array of points
        Random r = new Random();
        Point[] tab = new Point[Size];
        Console.WriteLine();
        Console.WriteLine("Generated points");
        for ( i=0 ; i<tab.Length ; ++i )
            {
            tab[i].M = r.NextDouble()*10.0;
            tab[i].X = (r.NextDouble()-0.5)*20.0;
            tab[i].Y = (r.NextDouble()-0.5)*20.0;
            tab[i].Z = (r.NextDouble()-0.5)*20.0;
#if DEBUG
            Console.WriteLine("Point no {0,2}:  m ={1,6:F3} ,  x ={2,7:F3} ,  y ={3,7:F3} ,  z ={4,7:F3}",
                               i, tab[i].M, tab[i].X, tab[i].Y, tab[i].Z);
#endif
            }

        // "manual" writing array of points to file (as text)
        time = DateTime.Now.Ticks;
        StreamWriter sw = new StreamWriter("text_data.dat");  // stream opened in Create mode
        sw.WriteLine(tab.Length);
        for ( i=0 ; i<tab.Length ; ++i )
            sw.WriteLine("{0},{1},{2},{3}", tab[i].M, tab[i].X, tab[i].Y, tab[i].Z);
        sw.Close();

        // reading array of points (saved as text) from file
        StreamReader sr = new StreamReader("text_data.dat");  // stream opened in Open mode
        Point[] tab1 = new Point[int.Parse(sr.ReadLine()!)];
        string[] buf;
        Console.WriteLine();
        Console.WriteLine("Points read from text file");
        for ( i=0 ; i<tab1.Length ; ++i )
            {
            buf = sr.ReadLine()!.Split(',');    // note exclamation mark
            tab1[i].M = double.Parse(buf[0]);
            tab1[i].X = double.Parse(buf[1]);
            tab1[i].Y = double.Parse(buf[2]);
            tab1[i].Z = double.Parse(buf[3]);
#if DEBUG
            Console.WriteLine("Point no {0,2}:  m ={1,6:F3} ,  x ={2,7:F3} ,  y ={3,7:F3} ,  z ={4,7:F3}",
                               i, tab1[i].M, tab1[i].X, tab1[i].Y, tab1[i].Z);
#endif
            }
        sr.Close();
        time = DateTime.Now.Ticks - time;
#if !DEBUG
        Console.WriteLine(time);
#endif

        // "manual" writing array of points to file (binary)
        time = DateTime.Now.Ticks;
        fs = new FileStream("binary_data.dat",FileMode.Create);
        BinaryWriter bw = new BinaryWriter(fs);
        bw.Write(tab.Length);
        for ( i=0 ; i<tab.Length ; ++i )
            {
            bw.Write(tab[i].M);
            bw.Write(tab[i].X);
            bw.Write(tab[i].Y);
            bw.Write(tab[i].Z);
            }
        bw.Close();
        fs.Close();

        // reading array of points (binary saved) from file
        fs = new FileStream("binary_data.dat",FileMode.Open);
        BinaryReader br = new BinaryReader(fs);
        Point[] tab2 = new Point[br.ReadInt32()];
        Console.WriteLine();
        Console.WriteLine("Points read from binary file");
        for ( i=0 ; i<tab2.Length ; ++i )
            {
            tab2[i].M = br.ReadDouble();
            tab2[i].X = br.ReadDouble();
            tab2[i].Y = br.ReadDouble();
            tab2[i].Z = br.ReadDouble();
#if DEBUG
            Console.WriteLine("Point no {0,2}:  m ={1,6:F3} ,  x ={2,7:F3} ,  y ={3,7:F3} ,  z ={4,7:F3}",
                               i, tab2[i].M, tab2[i].X, tab2[i].Y, tab2[i].Z);
#endif
            }
        br.Close();
        fs.Close();
        time = DateTime.Now.Ticks - time;
#if !DEBUG
        Console.WriteLine(time);
#endif

        // binary serialization of array of points
        time = DateTime.Now.Ticks;
        fs = new FileStream("binary_serialization.dat",FileMode.Create);
        BinaryFormatter bf = new BinaryFormatter();
        bf.Serialize(fs,tab);
        fs.Close();

        // binary deserialization of array of points
        fs = new FileStream("binary_serialization.dat",FileMode.Open);
        Point[] tab3 = (Point[])bf.Deserialize(fs);
        fs.Close();
        Console.WriteLine();
        Console.WriteLine("Binary serialization");
#if DEBUG
        for ( i=0 ; i<tab3.Length ; ++i )
            Console.WriteLine("Point no {0,2}:  m ={1,6:F3} ,  x ={2,7:F3} ,  y ={3,7:F3} ,  z ={4,7:F3}",
                               i, tab3[i].M, tab3[i].X, tab3[i].Y, tab3[i].Z);
#endif
        time = DateTime.Now.Ticks - time;
#if !DEBUG
        Console.WriteLine(time);
#endif

        // xml serialization of array of points
        time = DateTime.Now.Ticks;
        fs = new FileStream("xml_serialization.dat",FileMode.Create);
        XmlSerializer xs = new XmlSerializer(typeof(Point[]));
        xs.Serialize(fs,tab);
        fs.Close();

        // xml deserialization of array of points
        fs = new FileStream("xml_serialization.dat",FileMode.Open);
        Point[] tab4 = (Point[])xs.Deserialize(fs)!;
        fs.Close();
        Console.WriteLine();
        Console.WriteLine("Xml serialization");
#if DEBUG
        for ( i=0 ; i<tab4.Length ; ++i )
            Console.WriteLine("Point no {0,2}:  m ={1,6:F3} ,  x ={2,7:F3} ,  y ={3,7:F3} ,  z ={4,7:F3}",
                               i, tab4[i].M, tab4[i].X, tab4[i].Y, tab4[i].Z);
#endif
        time = DateTime.Now.Ticks - time;
#if !DEBUG
        Console.WriteLine(time);
#endif

        // data contract serialization of array of points
        time = DateTime.Now.Ticks;
        fs = new FileStream("data_contract_serialization.dat",FileMode.Create);
        DataContractSerializer dcs = new DataContractSerializer(typeof(Point[]));
        dcs.WriteObject(fs,tab);
        fs.Close();

        // data contract deserialization of array of points
        fs = new FileStream("data_contract_serialization.dat",FileMode.Open);
        Point[] tab5 = (Point[])dcs.ReadObject(fs)!;
        fs.Close();
        Console.WriteLine();
        Console.WriteLine("Data contract serialization");
#if DEBUG
        for ( i=0 ; i<tab5.Length ; ++i )
            Console.WriteLine("Point no {0,2}:  m ={1,6:F3} ,  x ={2,7:F3} ,  y ={3,7:F3} ,  z ={4,7:F3}",
                               i, tab5[i].M, tab5[i].X, tab5[i].Y, tab5[i].Z);
#endif
        time = DateTime.Now.Ticks - time;
//example - serialization --------------------------------------------------------------------------------------------------------------------

#if !DEBUG
        Console.WriteLine(time);
#endif

        // Json serialization of array of points
        string s;
        time = DateTime.Now.Ticks;
        s = JsonSerializer.Serialize<Point[]>(tab);
//      s = JsonSerializer.Serialize(tab,typeof(Point[]));                     // it is also correct
        StreamWriter sw2 = new StreamWriter("json_serialization.dat");         // stream opened in Create mode
        sw2.Write(s);
        sw2.Close();

        // Json deserialization of array of points
        StreamReader sr2 = new StreamReader("json_serialization.dat");          // stream opened in Open mode
        s = sr2.ReadToEnd();
        sr2.Close();
        Point[] tab6 = JsonSerializer.Deserialize<Point[]>(s)!;
//      Point[] tab6 = (Point[])JsonSerializer.Deserialize(s,typeof(Point[]));  // it is also correct
        Console.WriteLine();
        Console.WriteLine("Json serialization");
#if DEBUG
        for ( i=0 ; i<tab6.Length ; ++i )
            Console.WriteLine("Point no {0,2}:  m ={1,6:F3} ,  x ={2,7:F3} ,  y ={3,7:F3} ,  z ={4,7:F3}",
                               i, tab6[i].M, tab6[i].X, tab6[i].Y, tab6[i].Z);
#endif
        time = DateTime.Now.Ticks - time;
#if !DEBUG
        Console.WriteLine(time);
#endif

        Console.WriteLine();
        }

    }
    
    
    
    
    // example - "partial" serialization---------------------------------------------------------------------------------------------
    
    
    
using System;
using System.IO;
using System.Runtime.Serialization;

[DataContract]
class PascalTriangle : IDeserializationCallback
    {

    public PascalTriangle(int n=67)
        {
        size = n;
        compute(size);
        }

    public ulong this[int n, int k] => pt![n,k];   // note exclamation mark

    private ulong[,]? pt;

    [DataMember]
    private int size;

    private void compute(int s)
        {
        ++s;
        pt = new ulong[s,s];
        for ( int n=0 ; n<s ; ++n )
            {
            pt[n,0] = pt[n,n] = 1;
            for ( int k=1 ; k<n ; ++k )
                pt[n,k] = checked(pt[n-1,k-1]+pt[n-1,k]);
            }
        }

    void IDeserializationCallback.OnDeserialization(object? sender)
        {
        Console.WriteLine("PascalTriangle OnDeserialization - interface");
        compute(size);
        }

    [OnSerializing]
    private void PascalTriangleOnSerializing(StreamingContext context)
        {
        Console.WriteLine("PascalTriangleOnSerializing");
        }

    [OnSerialized]
    private void PascalTriangleOnSerialized(StreamingContext context)
        {
        Console.WriteLine("PascalTriangleOnSerialized");
        }

    [OnDeserializing]
    private void PascalTriangleOnDeserializing(StreamingContext context)
        {
        Console.WriteLine("PascalTriangleOnDeserializing");
        }

    [OnDeserialized]
    private void PascalTriangleOnDeserialized(StreamingContext context)
        {
        Console.WriteLine("PascalTriangleOnDeserialized");
        //compute(size);
        }

    }

class Test
    {

    public static void Main()
        {  // WriteObject i ReadObject
        PascalTriangle pt1 = new PascalTriangle();

        FileStream fs = new FileStream("PascalTriangle_Serialization_DataContract.dat",FileMode.Create);
        DataContractSerializer dcs = new DataContractSerializer(typeof(PascalTriangle));
        dcs.WriteObject(fs,pt1);
        fs.Close();

        fs = new FileStream("PascalTriangle_Serialization_DataContract.dat",FileMode.Open);
        PascalTriangle pt2 = (PascalTriangle)dcs.ReadObject(fs)!;
        fs.Close();

        Console.WriteLine(pt1![60,40]);   // note exclamation mark
        Console.WriteLine(pt2![60,40]);   // note exclamation mark
        }

    }
    
    
    // example - numbers and dates formatting -----------------------------------------------------------------------------------------------------------
    
    
using System;

class Test
    {

    public static void Main()
        {
        double d = 1000*Math.PI;
        int i = 17000;

        Console.WriteLine();
        Console.WriteLine(d);
        Console.WriteLine("{0}",d);
        
        Console.WriteLine();
        Console.WriteLine("{0,12:f5}",d);
        Console.WriteLine("{0,12:e5}",d);
        Console.WriteLine("{0,12:g5}",d);
        Console.WriteLine("{0,12:n5}",d);
        Console.WriteLine("{0,12:p5}",d);
        Console.WriteLine("{0,12:c5}",d);
        
        Console.WriteLine();
        Console.WriteLine("{0,12:f}",d);
        Console.WriteLine("{0,12:E}",d);
        Console.WriteLine("{0,12:g}",d);
        Console.WriteLine("{0,12:n}",d);
        Console.WriteLine("{0,12:p}",d);
        Console.WriteLine("{0,12:c}",d);

        Console.WriteLine();
        Console.WriteLine("{0:g}",d*0.000000000001);
        Console.WriteLine(d*0.000000000001);
        Console.WriteLine("{0,8:r5}",d);
        Console.WriteLine("{0,8:r}",d);

        Console.WriteLine();
        Console.WriteLine("{0,8:d9}",i);
        Console.WriteLine("{0,8:x}",10);
        Console.WriteLine("{0,8:X}",10);

        Console.WriteLine();
        Console.WriteLine("{0,6:0.00 }",-10.0);
        Console.WriteLine("{0,6:0.00;(0.00)}",-10.0);

        DateTime dt = DateTime.Now;

        Console.WriteLine();
        Console.WriteLine("{0:d-M-yy}",dt);
        Console.WriteLine("{0:dd-MM-yyyy}",dt);
        Console.WriteLine("{0:ddd, d MMM yy}",dt);
        Console.WriteLine("{0:dddd, dd MMMM yyyy}",dt);
        Console.WriteLine("godzina {0:HH:mm:ss.ff}",dt);

        Console.WriteLine();
        var culture = new System.Globalization.CultureInfo("en-US");
        Console.WriteLine(string.Format(culture,"{0:d-M-yy}",dt));
        Console.WriteLine(string.Format(culture,"{0:dd-MM-yyyy}",dt));
        Console.WriteLine(string.Format(culture,"{0:ddd, d MMM yy}",dt));
        Console.WriteLine(string.Format(culture,"{0:dddd, dd MMMM yyyy}",dt));
        Console.WriteLine(string.Format(culture,"time {0:HH:mm:ss.ff}",dt));

        Console.WriteLine();
        }

    }
    
    
    // example - user-defined formatting ----------------------------------------------------------------------
    
    
using System;

struct Person : IFormattable
    {
    private string FirstName;
    private string LastName;
    private bool Female;

    public Person (string fn, string ln, bool f) { FirstName=fn; LastName=ln; Female=f; }

    public string ToString(string? f, IFormatProvider? fp)
        {
        if ( f==null ) f = "G";
        switch ( f[0] )
            {
            case 'G':
                return FirstName + " " + LastName ;
            case 'E':
                return (Female?"Mrs ":"Mr ") + FirstName + " " + LastName ;
            case 'O':
                return LastName + " " + FirstName ;
            case 'F':
                return FirstName ;
            case 'L':
                return LastName ;
            default:
                throw new FormatException();
            }
        }
    }

class Test
    {

    public static void Main()
        {
        Person[] list = new Person[]
            {
            new Person("Jan","Kowalski",false),
            new Person("Suzana","Green",true),
            new Person("John","Smith",false),
            new Person("Anna","Abacka",true),
            new Person("Jan","Dzban",false),
            new Person("Cecilia","Civil",true),
            new Person("Bruce","Lee",false)
            };

        Console.WriteLine();

        foreach ( Person p in list )
            Console.WriteLine(p);
        Console.WriteLine();

        foreach ( Person p in list )
            Console.WriteLine("{0}",p);
        Console.WriteLine();

        foreach ( Person p in list )
            Console.WriteLine("{0:G}",p);
        Console.WriteLine();

        foreach ( Person p in list )
            Console.WriteLine("{0:E}",p);
        Console.WriteLine();

        foreach ( Person p in list )
            Console.WriteLine("{0:O}",p);
        Console.WriteLine();

        foreach ( Person p in list )
            Console.WriteLine("{0:F}",p);
        Console.WriteLine();

        foreach ( Person p in list )
            Console.WriteLine("{0:L}",p);
        Console.WriteLine();
        }

    }
    
    
    
    // example - operations on objects of string and StringBuilder types - efficiency comparison---------------------------------------------------------------
    
    
using System;
using System.Text;

class Test
    {

    public static void Main()
        {
        DateTime t1, t2;

        string s = "";
        t1 = DateTime.Now;
        for ( int i=0 ; i<200000 ; ++i ) // 200 thousand
            s += "a";
        t2 = DateTime.Now;
        Console.WriteLine("{0,7:0.000}",(t2-t1).TotalSeconds);

        StringBuilder sb = new StringBuilder();
        t1 = DateTime.Now;
        for ( int i=0 ; i<200000000 ; ++i ) // 200 million
            sb.Append("a");
        t2 = DateTime.Now;
        Console.WriteLine("{0,7:0.000}",(t2-t1).TotalSeconds);
        }

    }
