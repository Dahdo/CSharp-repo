// example - events - timer-------------------------------------------------------------------------------------------------------------

using System;
using System.Threading;

public class TimeEventArgs : EventArgs
    {
    public readonly DateTime time;
    public TimeEventArgs(DateTime t) => time = t;
    }

class MyTimer
    {
    public event EventHandler<TimeEventArgs>? OnSecondChanged = null;

    public void Run()
        {
        DateTime last = DateTime.Now;
        DateTime curr;
        while ( !Console.KeyAvailable )
            {
            Thread.Sleep(50);  //   50 miliseconds
            curr = DateTime.Now;
            if ( curr.Second!=last.Second )
                {
                // if ( OnSecondChanged!=null )                                         // this code
                //     OnSecondChanged.Invoke(this,new TimeEventArgs(curr));            // is incorrect!

                OnSecondChanged?.Invoke(this,new TimeEventArgs(curr));                  // correct - C# version 6 or newer

                // EventHandler<TimeEventArgs> localOnSecondChanged = OnSecondChanged;  //
                // if ( localOnSecondChanged!=null )                                    // correct - C# versions earlier then 6
                //     localOnSecondChanged.Invoke(this,new TimeEventArgs(curr));       //

                last = curr;
                }
            }
        }
    }

class FileSave
    {
    int count = 0;
    public void Write(object? sender, TimeEventArgs e)
        {
        count = (count+1)%5;
        if ( count==0 )
            Console.WriteLine("\nFile save:      {0:00}:{1:00}:{2:00}\n",e.time.Hour,e.time.Minute,e.time.Second);
        }
    }

class Test
    {
    public static void Main()
        {
        MyTimer  t   = new MyTimer();
        FileSave fs  = new FileSave();
        t.OnSecondChanged += (object? sender, TimeEventArgs e) =>
                                 Console.WriteLine("Current time:   {0:00}:{1:00}:{2:00}",e.time.Hour,e.time.Minute,e.time.Second);
        t.OnSecondChanged += fs.Write;
        t.Run();
        }
    }
    
    
    // example - synchronous computations---------------------------------------------------------------------------------------------
    
    
using System;

class SyncExample
    {

    public static void Main()
        {
        int r1, r2, r3;
        DateTime start, stop;

        start = DateTime.Now;
        Console.WriteLine("Begin long computations series");
        r1 = FirstLongComputation();
        r2 = SecondLongComputation();
        r3 = ThirdLongComputation();
        Console.WriteLine("End long computations series");
        stop = DateTime.Now;

        Console.WriteLine($"Results:  {r1}, {r2}, {r3}");
        Console.WriteLine($"Total computation time:  {stop-start}");
        Console.WriteLine();
        }

    private static int FirstLongComputation()
        {
        Console.WriteLine("First long computation started");
        for ( int i=0 ; i<11 ; ++i )
            {
            delay();
            Console.WriteLine("*");
            }
        Console.WriteLine("First long computation completed");
        return 1;
        }

    private static int SecondLongComputation()
        {
        Console.WriteLine("Second long computation started");
        for ( int i=0 ; i<17 ; ++i )
            {
            delay();
            Console.WriteLine("#");
            }
        Console.WriteLine("Second long computation completed");
        return 2;
        }

    private static int ThirdLongComputation()
        {
        Console.WriteLine("Third long computation started");
        for ( int i=0 ; i<7 ; ++i )
            {
            delay();
            Console.WriteLine("@");
            }
        Console.WriteLine("Third long computation completed");
        return 3;
        }

    private static void delay() => System.Threading.Thread.Sleep(500);

    }
    
    
    //example - asynchronous computations----------------------------------------------------------------------------------------------------------------------
    
    
using System;
using System.Threading.Tasks;   // new

class AsyncExample
    {

    public static void Main()
        {
        Task<int> r1, r2, r3;   // change
        DateTime start, stop;

        start = DateTime.Now;
        Console.WriteLine("Begin long computations series");
        r1 = FirstLongComputationAsync();    // change
        r2 = SecondLongComputationAsync();   // change
        r3 = ThirdLongComputationAsync();    // change
        Task.WaitAll(r1,r2,r3);              // new
        Console.WriteLine("End long computations series");
        stop=DateTime.Now;

        Console.WriteLine($"Results:  {r1.Result}, {r2.Result}, {r3.Result}");   // change
        Console.WriteLine($"Total computation time:  {stop-start}");
        Console.WriteLine();
        }

    private static async Task<int> FirstLongComputationAsync()    // new function
        {
        Console.WriteLine("Begin first asynchronous call");
        int r = await Task<int>.Run(()=>FirstLongComputation());
        Console.WriteLine("End first asynchronous call");
        return r;
        }

    private static async Task<int> SecondLongComputationAsync()   // new function
        {
        Console.WriteLine("Begin second asynchronous call");
        int r = await Task<int>.Run(()=>SecondLongComputation());
        Console.WriteLine("End second asynchronous call");
        return r;
        }

    private static async Task<int> ThirdLongComputationAsync()    // new function
        {
        Console.WriteLine("Begin third asynchronous call");
        int r = await Task<int>.Run(()=>ThirdLongComputation());
        Console.WriteLine("End third asynchronous call");
        return r;
        }

    private static int FirstLongComputation()    // unchanged !!!
        {
        Console.WriteLine("First long computation started");
        for ( int i=0 ; i<11 ; ++i )
            {
            delay();
            Console.WriteLine("*");
            }
        Console.WriteLine("First long computation completed");
        return 1;
        }

    private static int SecondLongComputation()    // unchanged !!!
        {
        Console.WriteLine("Second long computation started");
        for ( int i=0 ; i<17 ; ++i )
            {
            delay();
            Console.WriteLine("#");
            }
        Console.WriteLine("Second long computation completed");
        return 2;
        }

    private static int ThirdLongComputation()    // unchanged !!!
        {
        Console.WriteLine("Third long computation started");
        for ( int i=0 ; i<7 ; ++i )
            {
            delay();
            Console.WriteLine("@");
            }
        Console.WriteLine("Third long computation completed");
        return 3;
        }

    private static void delay() => System.Threading.Thread.Sleep(500);

    }
    
    
    
    // example - parallel loops-----------------------------------------------------------------------------------------------------------
    
    
using System;
using System.Threading.Tasks;

public class Matrix
    {

    private double[,] tab;
    private int size;

    public Matrix(int n)
        {
        tab = new double[n,n];
        size = n;
        }

    public static Matrix Random(int n)
        {
        Matrix m = new Matrix(n);
        Random r = new Random();
        for ( int i=0 ; i<n ; ++i )
            for ( int j=0 ; j<n ; ++j )
                m.tab[i,j] = r.NextDouble();
        return m;
        }

    public Matrix Mul(Matrix a)
        {
        if ( size!=a.size ) throw new ArgumentException("Incorrect martix size");
        Matrix m = new Matrix(size);
        for ( int i=0 ; i<size ; ++i )
            for ( int j=0 ; j<size ; ++j )
                for ( int k=0 ; k<size ; ++k )
                    m.tab[i,j] += tab[i,k]*a.tab[k,j];
        return m;
        }

    public Matrix MulParallel(Matrix a)
        {
        if ( size!=a.size ) throw new ArgumentException("Incorrect martix size");
        Matrix m = new Matrix(size);
        Parallel.For( 0, size, i=>
            {
            for ( int j=0 ; j<size ; ++j )
                for ( int k=0 ; k<size ; ++k )
                    m.tab[i,j] += tab[i,k]*a.tab[k,j];
            });
        return m;
        }

    public bool IsEqual(Matrix a)
        {
        if ( size!=a.size ) return false;
        for ( int i=0 ; i<size ; ++i )
            for ( int j=0 ; j<size ; ++j )
                if ( tab[i,j]!=a.tab[i,j] )
                    return false;
        return true;
        }

    public bool IsEqualParallel(Matrix a)
        {
        if ( size!=a.size ) return false;
        var res = Parallel.For( 0, size, (i,ls)=>
            {
            for ( int j=0 ; j<size ; ++j )
                if ( tab[i,j]!=a.tab[i,j] )
                    ls.Stop();
            });
        return res.IsCompleted;
        }

    }

class Test
    {

    const int N = 800;

    public static void Main()
        {
        DateTime t1, t2, t3, t4, t5;

        Matrix m1 = Matrix.Random(N);
        Matrix m2 = Matrix.Random(N);

        t1 = DateTime.Now;
        Matrix r1 = m1.Mul(m2);
        t2 = DateTime.Now;
        Matrix r2 = m1.MulParallel(m2);

        t3 = DateTime.Now;
        bool e1 = r1.IsEqual(r2);
        t4 = DateTime.Now;
        bool e2 = r1.IsEqualParallel(r2);

        t5 = DateTime.Now;
        Console.WriteLine($" Sequential matrix multiplication: {t2-t1}");
        Console.WriteLine($" Parallel matrix multiplication:   {t3-t2}");

        Console.WriteLine($" Sequential matrix comparison: {e1}, {t4-t3}");
        Console.WriteLine($" Parallel matrix comparison:   {e2}, {t5-t4}");

        Console.WriteLine();
        }

    }
